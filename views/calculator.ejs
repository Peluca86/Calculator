<div class="calculadora">
    <div class="pantalla">
        <input data-operacion-actual class="input-pantalla" autocomplete="off" type="text" name="" readonly>
        <div data-operacion-temporal></div>
    </div>
    <div class="botones">
        <button data-clear class="tecla gris-claro">AC</button>
        <button data-numero class="tecla gris-claro">(</button>
        <button data-numero class="tecla gris-claro">)</button>
        <button data-operacion class="tecla naranja">/</button>
        <button data-numero class="tecla gris-oscuro">7</button>
        <button data-numero class="tecla gris-oscuro">8</button>
        <button data-numero class="tecla gris-oscuro">9</button>
        <button data-operacion class="tecla naranja">*</button>
        <button data-numero class="tecla gris-oscuro">4</button>
        <button data-numero class="tecla gris-oscuro">5</button>
        <button data-numero class="tecla gris-oscuro">6</button>
        <button data-operacion class="tecla naranja">-</button>
        <button data-numero class="tecla gris-oscuro">1</button>
        <button data-numero class="tecla gris-oscuro">2</button>
        <button data-numero class="tecla gris-oscuro">3</button>
        <button data-operacion class="tecla naranja">+</button>
        <button data-numero class="tecla gris-oscuro" id="cero">0</button>
        <button data-numero class="tecla gris-oscuro" id="punto">.</button>
        <button data-igual class="tecla naranja" id="igual">=</button>
    </div>
</div>

<script>

    class Calculadora {
        constructor(operacionAnteriorElemento, operacionActualElemento) {
            this.operacionAnteriorElemento = operacionAnteriorElemento
            this.operacionActualElemento = operacionActualElemento
            this.limpiar()
        }

        limpiar() {
            this.operacionActual = ''
            this.operacionAnterior = ''
        }

        agregarNumero(n) {
            // Evita que el usuario ingrese más de un caracter especial
            if (/[\/*+-.]$/.test(n) &&
                /[\/*+-]$/.test(this.operacionActual)) {
                this.operacionActual = this.operacionActual.substring(0, this.operacionActual.length - 1) + n
                return
            } 

            // Chequea que no pueda ingresar mas de un punto decimal
            let temp = (this.operacionActual.toString() + n.toString()).split(/[\/*+-]/)

            let ultimoNumero = temp[temp.length - 1]

            if ((ultimoNumero.match(/\./g) || []).length > 1 && n == ".") {
                return
            }

            // Evita ingresar un número como 05 o 0000.5
            if (ultimoNumero[0] == "0" && this.operacionActual[this.operacionActual.length - 1] == "0" && n != "." && !this.operacionActual.includes(".")) {
                this.operacionActual = this.operacionActual.substring(0, this.operacionActual.length - 1) + n;
                return
            }

            this.operacionActual = this.operacionActual.toString() + n.toString()
        }
        calcular() {
            let cuenta
            cuenta = eval(this.operacionActual)
            this.sendOperationToServer({ operacion: this.operacionActual, resultado: cuenta });
            this.operacionActual = this.getDisplayNumber(cuenta)
            this.operacionAnterior = ''
        }

        calcularTemporal() {
            if (/[\/*+-]/.test(this.operacionActual) || /[\/*+-]$/.test(this.operacionActual)) {
                try {
                    this.operacionAnterior = eval(this.operacionActual)
                } catch (error) {
                    this.operacionAnterior = ""
                }
            }
        }

        // Funcion que formatea el numero ingresado. Limita el ingreso de ceros antes de un punto decimal, agrega comas.
        getDisplayNumber(number) {
            return number.toString()
        }

        actualizarPantalla() {
            this.operacionActualElemento.value = this.getDisplayNumber(this.operacionActual)
            this.operacionAnteriorElemento.innerText = this.operacionAnterior
        }

        sendOperationToServer(operationData) {
            fetch('/agregar-operacion', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(operationData), // Enviar la operación y el resultado
            })
                .then(response => response.json())
                .then(data => console.log(data))
                .catch(error => console.error(error));
        }

        borrarCaracter() {
            this.operacionActual = this.operacionActual.toString().slice(0, -1)
        }

    }

    const numeros = document.querySelectorAll('[data-numero]')
    const operaciones = document.querySelectorAll('[data-operacion]')
    const igual = document.querySelector('[data-igual]')
    const clear = document.querySelector('[data-clear]')
    const operacionAnteriorElemento = document.querySelector('[data-operacion-temporal]')
    const operacionActualElemento = document.querySelector('[data-operacion-actual]')

    const calculadora = new Calculadora(operacionAnteriorElemento, operacionActualElemento)

    numeros.forEach(boton => {
        boton.addEventListener('click', () => {
            calculadora.agregarNumero(boton.innerText)
            calculadora.calcularTemporal()
            calculadora.actualizarPantalla()
        })
    })

    operaciones.forEach(boton => {
        boton.addEventListener('click', () => {
            calculadora.agregarNumero(boton.innerText)
            calculadora.actualizarPantalla()
        })
    })

    igual.addEventListener('click', boton => {
        calculadora.calcular()
        calculadora.actualizarPantalla()
    })

    clear.addEventListener('click', boton => {
        calculadora.limpiar()
        calculadora.actualizarPantalla()
    })

    // Funcionamiento por teclado

    window.addEventListener('keydown', (e) => {
        if (e.key == 'Enter') {
            calculadora.calcular()
        } else if (e.key == 'Backspace') {
            calculadora.borrarCaracter()
        } else if ((e.keyCode >= 48 && e.keyCode <= 57) || (e.key == "/" || e.key == "*" || e.key == "+" || e.key == "-" || e.key == ".")) {
            calculadora.agregarNumero(e.key)
        }
        calculadora.calcularTemporal()
        calculadora.actualizarPantalla();
    })

    // NO SE PUEDEN AGREGAR CEROS DECIMALES Y SI SE PUEDE AGREGAR INFINITOS PUNTOS

</script>